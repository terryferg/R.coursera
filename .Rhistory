f1 <- function(x, y) {
x+y
}
f1( 3, 4)
f.good <- function(x, y) {
z1 <- 2*x + y
z2 <- x + 2*y
z3 <- 2*x + 2*y
z4 <- x/y
return(c(z1, z2, z3, z4))
}
f.good(1, 2)
for(i in c(1, 3, 6, 9)) {
z <- i + 1
}
z
#using the print statement to see result at each iteration
for(i in 3:5) {
z <- i + 1
print(z)
}
?slidify
??slidify
x<- c("a", "b", "c", "d")
for i in 1:4{
print x
}
print(x[i])
for i in 1:4{
print(x[i])
}
for(i in 1:4) {
print(x[i])
}
for(i in seq_along(x)){
print(x[i])
}
for(letter in x){print(letter)}
y<- c(1, 2, 3, 4)
for(letter in y){print(letter)}
x<-matrix(1:6, 2,3)
x
?matrix
x<-matrix(1:6, nrow=3,ncol=2,dimnames<-"row1", "row2", "row3",
"Column1", "Column2", "Column3")
x<-matrix(1:6, nrow=3,ncol=2,dimnames="row1", "row2", "row3",
"Column1", "Column2", "Column3")
x<-matrix(1:6, nrow=3,ncol=2,dimnames=(c("row1", "row2", "row3",
"Column1", "Column2", "Column3")))
x
x<-matrix(1:6, nrow=3,ncol=2,dimnames=list(c("row1", "row2", "row3",
"Column1", "Column2", "Column3")))
x<-matrix(1:6, nrow=3,ncol=2,dimnames=list(c("row1", "row2", "row3"),
c("Column1", "Column2", "Column3")))
x
x<-matrix(1:6, nrow=3,ncol=2,dimnames=list(c("row1", "row2", "row3"),
c("Column1", "Column2")))
x
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))){print(x[i,j])}
}
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))){print(x[i,j])}
}
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))){print(x[i,j])}
}
x<-matrix(1:6, nrow=2,ncol=3,dimnames=list(c("row1", "row2"),
c("Column1", "Column2", "Col3")))
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))){print(x[i,j])}
x
x<-matrix(1:6, nrow=2,ncol=3, dimnames=list(c("row1", "row2"),
c("Column1", "Column2","Col3")))
x
x<-matrix(1:6, nrow=2,ncol=3, dimnames=list(c("row1", "row2"),
c("Column1", "Column2","Col3")), byrow=TRUE)
x
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))){print(x[i,j])}
}
count<-0
while(count<10) {
print(count)
count<-count+1
})
count<-0
while(count<10) {
print(count)
count<-count+1
}
z<-5
while z>=3 && z<=10) {
print(z)
coin<-rbinom(1,1,.5)
if(coin==1) {### random walk
z<-Z+1
}else {z<-z-1}
}
z<-5
while z>=3 && z<=10) {
print(z)
coin<-rbinom(1,1,.5)
if(coin==1) {### random walk
z<-Z+1
}else {z<-z-1}
}
z<-5
while (z>=3 && z<=10) {
print(z)
coin<-rbinom(1,1,.5)
if(coin==1) {### random walk
z<-Z+1
}else {z<-z-1}
}
z<-5
while (z>=3 && z<=10) {
print(z)
coin<-rbinom(1,1,.5)
if(coin==1) {### random walk
z<-z+1
}else {z<-z-1}
}
z<-5
while (z>=3 && z<=10) { ### r always checks from left to right
print(z)
coin<-rbinom(1,1,.5) ##  a random number generator
print(coin)
if(coin==1) {### random walk
z<-z+1
}else {z<-z-1}
}
z<-5
while (z>=3 && z<=10) { ### r always checks from left to right
print(z)
coin<-rbinom(1,1,.5) ##  a random number generator
print("coin:")
print(coin)
if(coin==1) {### random walk
z<-z+1
}else {z<-z-1}
}
z<-5
while (z>=3 && z<=10) { ### r always checks from left to right
print(z)
coin<-rbinom(1,1,.5) ##  a random number generator
print("coin:")
print(coin)
if(coin==1) {### random walk
z<-z+1
}else {z<-z-1}
}
for (i in 1:10){}
coin<-rbinom(1,1,.5) ##
print(coin)
}
for (i in 1:10){
coin<-rbinom(1,1,.5) ##
print(coin)
}
for (i in 1:10){
coin<-rbinom(2,1,.5) ##
print(coin)
}
for (i in 1:10){
coin<-rbinom(5,1,.5) ##
print(coin)
}
for (i in 1:10){
coin<-rbinom(5,2,.5) ##
print(coin)
}
for (i in 1:10){
coin<-rbinom(5,2,.9) ##
print(coin)
}
for (i in 1:10){
coin<-rbinom(5,9,.9) ##
print(coin)
}
for (i in 1:10){
coin<-rbinom(5,9,.25) ##
print(coin)
}
for (i in 1:10){
coin<-rbinom(5,9,.99) ##
print(coin)
}
tolerance<-1e-8
tolerance
x0<-1
tolerance<-1e-8
repeat {x1 <-computeEstimate()
if(abs(x1 - x0)<tolerance) {break} else{x0<-x1}
}
for (i in 1:100) {
if (i<=20) { #### skip the first 20 iterations
next
}
### do something here
print(i)
}
for (i in 1:100) {
if (i>=20) { #### skip the first 20 iterations
next
}
### do something here
print(i)
}
f1 <- function(x, y) {
x+y
}
f1( 3, 4)
add2 <- function(x, y) {
x+y
}
add2( 3, 4)
x<-1:20
above<-function(x,n){
use<-x >n
x[use]
}
above(x)
<-1:20
n<-10
above<-function(x, n){
use<-x >n
x[use]
}
above(x)
x<-1:20
n<-10
above<-function(x, n){
use<-x>n
x[use]
}
above(x)
above(x,10)
above(x,13)
columnmean<-function(y){
nc<-ncol(y)
means <- numberic(nc)   #initializing a vector to store the mean for each column has to equal number of columns. it will be filled
for (i in 1:nc) {
means{i}<- mean(y[, i])
}
means
}
Sys.time()
x<-Sys.time()
p<- as.POSIXlt(x)
p
names(unclass(p))
p$sec
unclass(x)
?strptime
install.packages("swirl")
library("swirl")
ls()
rm(list=ls())
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-(z/my_sqrt)
my_div<-z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
c(1,2,3,4) + c(0,10,100)
c(1,2,3,4) + c(0,10,1000)
c(1,2,3,4) + c(0,10,1000)
z*2+1000
my_div
1:20
pi:10
15:1
`:`
?`:`
seq(1,20)
seq(0,10 by=. )
seq(0,10 by=.5 )
seq(0, 10 by=.5)
seq(1:20, 10 by=.5)
seq(0, 10, by=0.5)
cube <- function(x, n) {
x^3
}
bye()
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
F(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
x<-list(a=1:5, b=rnorm(10))
lapply(x, mean)
b
$b
x
x <-matrix(rnorm(200),20,10)
x
apply(x,2, mean)
apply(x,2, mean)
apply(x,1, sum)
library("swirl")
swirl
logical()
swirl()
seq(5,10, length=30)
myseq<-seq(5, 10, length=30)
info()
my_seq<-seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect<-c(.5, 55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My", "name","is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Terry")
paste(c(my_char, "Terry"), collapse = " ")
my_name<-c(my_char, "Terry")
my_name
paste(my_char, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello", "world", sep = " ")
paste("Hello", "world", sep =" ")
paste("Hello", "world!", sep =" ")
x <- c(rnorm(10), runif(10), rnorm(10))
x
f <- gl(3, 10)
f
rm(list=ls())
gco.v1.df<-read.csv(file="gco.v1.df.csv")
setwd("~/Documents/R.coursera")
setwd("~/Documents/R.coursera")
list.files()
gco.v1.df<-read.csv(file="gco.v1.df.csv")
table(gco.v1.df$cluster)
str(list.ids)
list.ids <- unique(gco.v1.df$store.id)
str(list.ids)
lapply(split(gco.v1.df$malibu.coconut.rum.1.75l.price, gco.v1.df$state, drop=FALSE), mean, na.rm=TRUE)
sapply(split(gco.v1.df$malibu.coconut.rum.1.75l.price, gco.v1.df$state, drop=FALSE), mean, na.rm=TRUE)
library("swirl")
rm(list=ls())
ls()
swirl()
1
swirl()
help()
swirl()
swirl()
main()
swirl()
dim()
dim(flags)
dim(flags)
info()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
data("iris")
rm(list=ls())
library(datasets)
data(iris)
?iris
mean(iris$Sepal.Length)
tapply(iris$Sepal.Length, iris$Species, mean)
names(iris)
apply(iris[ , 1:4],2, mean)
library(datasets)
data(mtcars)
?mtcars
sapply(mtcars,class )
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(mtcars, cly, mean)
split(mtcars, mtcars$cly)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
lapply(mtcars, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63634
debug(ls)
?debug
